map $http_cookie $cookie_x_proxy_referer {
    default "";
	"~*x-proxy-referer=(?<referer>[^;]+)" "$referer";
} 

server {
    listen 80;
    
    resolver_timeout 3s;
    resolver 8.8.8.8 114.114.114.114 valid=30s ipv6=off;

    location / {        
        set $proxy_scheme ""; 
        set $proxy_host ""; 
        set $proxy_uri "";
        set $proxy_referer $cookie_x_proxy_referer;

        # When the 'x-proxy-referer' parameter is present in the cookie, this captures the proxy scheme and host,
        # and preserves the full request URI for further processing
        if ($proxy_referer ~* (?<proxy_scheme>http|https)://(?<proxy_host>[^/]+)) {
            set $proxy_scheme $proxy_scheme;
            set $proxy_host $proxy_host;
            set $proxy_uri $request_uri;
        }

        # Extracts proxy target details (scheme, host, and URI) from the 'x-proxy-to' parameter in the request URI
        if ($request_uri ~* ^/(?<go_flag>\?x-proxy-to=)(?<proxy_scheme>http|https)://(?<proxy_host>[^/]+)(?<proxy_uri>.*)) {
            set $proxy_scheme $proxy_scheme;
            set $proxy_host $proxy_host;
            set $proxy_uri $proxy_uri;
            set $proxy_referer ""; # reset proxy_referer
        }

        # If the $proxy_host is not set, do not proceed with proxying
        if ($proxy_host = "") {
            add_header 'Content-Type' 'text/plain';
            return 200 'Hello world!';
        }

        # Forward requests to the captured URL for proxying
        set $proxy_http_host $proxy_scheme://$proxy_host;
        proxy_set_header Host $proxy_host;
        proxy_set_header Origin $proxy_http_host;
        proxy_set_header Referer $proxy_http_host$proxy_uri;
        proxy_ssl_server_name on;
        proxy_pass $proxy_http_host$proxy_uri;

        # Change the Location header from the proxied server to the local server, maintaining the path and query
        proxy_redirect ~*(.*) $scheme://$http_host/?x-proxy-to=$1;

        # Alter Set-Cookie headers from the upstream server's domain to the proxy's domain
        proxy_cookie_domain ~\.([a-z]+\.[a-z]+)$ .$host;

        # Handle options for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Length' 0;
            return 204;
        }

        # Hide certain security headers from proxy responses to prevent
        # them from being passed through to the client
        proxy_hide_header Report-To;
        proxy_hide_header X-Frame-Options;
        proxy_hide_header Feature-Policy; 
        proxy_hide_header Permissions-Policy;
        proxy_hide_header Strict-Transport-Security;
        proxy_hide_header Content-Security-Policy;
        proxy_hide_header Content-Security-Policy-Report-Only;
        proxy_hide_header Cross-Origin-Opener-Policy;

        # Set x-proxy-referer to cookie
        if ($proxy_referer = "") {
            add_header Set-Cookie "x-proxy-referer=${proxy_http_host}; Path=/; HttpOnly";
        }

        # Add CORS headers to all responses; this is a permissive setting
        # that allows all domains to access your resources. Use with caution,
        # and only if you understand the implications.
        proxy_hide_header Access-Control-Allow-Origin;
        add_header 'Access-Control-Allow-Origin' '*' always;
    }
}